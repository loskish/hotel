/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUIMainWindow.java
 *
 * Created on 23-lug-2010, 23.39.44
 */

package it.losko.hotel.view.gui;


import it.losko.hotel.model.action.Action;
import it.losko.hotel.model.action.ActionSelectionAction;
import it.losko.hotel.model.action.Choosable;
import it.losko.hotel.model.exception.HotelException;
import it.losko.hotel.model.game.Game;
import it.losko.hotel.model.info.Info;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author losko
 */
public class GUIMainWindow extends javax.swing.JFrame {
    private static final long serialVersionUID = 1L;

    private final GUI gui;
    private ActionSelectionAction askForInputAction;
    private final GUIBoard board; 
	
	/** Creates new form GUIMainWindow */
    public GUIMainWindow(final GUI gui) {
    	this.gui = gui;
        board = new GUIBoard(gui);
        
        initComponents();
        setLocationRelativeTo(null);

        hsplitPane.setRightComponent(board);
    }
    
    public GUI getGui() {
		return gui;
	}

	public javax.swing.JMenu getNotifier() {
        return notifierMenu;
    }
    
    public javax.swing.JTabbedPane getPlayersTabbedPane() {
    	return playersTabbedPane;
    }
    
    public GUIBoard getBoard() {
		return board;
	}

    public void askAction(final ActionSelectionAction askForInputAction) {
        this.askForInputAction = askForInputAction;
        
		int i = 0;
		for (Choosable pc : askForInputAction.getActionsList()) {
			final JButton button = new JButton("<html>" + pc.getChoiceDescription() + "</html>");
			button.setPreferredSize(new Dimension(0, 60));
			button.setName(String.valueOf(++i));
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					actionButtonActionPerformed(e);
				}
			});
			actionSelectorPanel.add(button);
		}
		
		actionSelectorPanel.validate();
		actionSelectorPanel.setEnabled(true);
		skipButton.setEnabled(askForInputAction.isSkippable());
    }
    
    private void actionButtonActionPerformed(ActionEvent e) {
    	 if(askForInputAction != null) {
             actionSelectorPanel.setEnabled(false);
             skipButton.setEnabled(false);
             askForInputAction.setInputAsInteger(Integer.valueOf(((JButton)e.getSource()).getName()));
             // These ones go after calling getSelectedIndex()
             actionSelectorPanel.removeAll();
             askForInputAction = null;
         }
	}
    
    public void updateValues(Action action) {
		// Notifier
    	final int notifierSize = 20;
		if(notifierMenu.getText() != null && !notifierMenu.getText().isEmpty()) {
			final JMenuItem menuItem = new JMenuItem(notifierMenu.getText());
			menuItem.setEnabled(false);
			notifierMenu.add(menuItem, 0);
			if(notifierMenu.getItemCount() > notifierSize) {
				notifierMenu.remove(notifierSize);
			}
		}
		notifierMenu.setText(action.getNotifiableDescription());
    	
		// Players tabbed pane
    	for(int i = 0; i < playersTabbedPane.getTabCount(); i++) {
    		GUIPlayerTab guiPlayerTab = (GUIPlayerTab) playersTabbedPane.getComponentAt(i);
    		if(guiPlayerTab != null) {
    			guiPlayerTab.updateValues();
    		}
    	}
    	
    	getBoard().repaint();
    }
    
    public void clear() {
    	playersTabbedPane.removeAll();
    	actionSelectorPanel.removeAll();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hsplitPane = new javax.swing.JSplitPane();
        commandsPanel = new javax.swing.JPanel();
        rollDiceButton = new javax.swing.JButton();
        rollDiceAndActionSelectorSeparator = new javax.swing.JSeparator();
        actionSelectorScrollPane = new javax.swing.JScrollPane();
        actionSelectorScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        actionSelectorScrollPane.getVerticalScrollBar().setUnitIncrement(100);
        actionSelectorLabel = new javax.swing.JLabel();
        skipAndPlayersPaneSeparator = new javax.swing.JSeparator();
        playersTabbedPane = new javax.swing.JTabbedPane();
        playersTabbedPane.setBackground(Color.WHITE);
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        createMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        loadMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        saveMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        pauseMenuItem = new javax.swing.JMenuItem();
        resumeMenuItem = new javax.swing.JMenuItem();
        terminateMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        editMenu = new javax.swing.JMenu();
        configurationMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        fillerMenu = new javax.swing.JMenu();
        notifierMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(Info.getSingleton().getName() + " - Game");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        hsplitPane.setDividerLocation(200);
        hsplitPane.setDividerSize(1);
        hsplitPane.setLastDividerLocation(200);
        hsplitPane.setMinimumSize(new java.awt.Dimension(0, 0));
        hsplitPane.setPreferredSize(new java.awt.Dimension(0, 0));

        commandsPanel.setPreferredSize(new java.awt.Dimension(32767, 32767));

        rollDiceButton.setText("Roll dice");
        rollDiceButton.setEnabled(false);
        rollDiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDiceButtonActionPerformed(evt);
            }
        });

        actionSelectorLabel.setText("Select action:");

        playersTabbedPane.setAlignmentX(0.0F);
        playersTabbedPane.setAlignmentY(0.0F);
        playersTabbedPane.setMinimumSize(new java.awt.Dimension(100, 100));
        skipButton = new javax.swing.JButton();
        
                skipButton.setText("Skip");
                skipButton.setEnabled(false);
                skipButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        skipButtonActionPerformed(evt);
                    }
                });

        javax.swing.GroupLayout gl_commandsPanel = new javax.swing.GroupLayout(commandsPanel);
        gl_commandsPanel.setHorizontalGroup(
        	gl_commandsPanel.createParallelGroup(Alignment.TRAILING)
        		.addGroup(gl_commandsPanel.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(rollDiceButton, GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        			.addContainerGap())
        		.addComponent(rollDiceAndActionSelectorSeparator, GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        		.addGroup(gl_commandsPanel.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(actionSelectorLabel)
        			.addContainerGap(45, Short.MAX_VALUE))
        		.addGroup(gl_commandsPanel.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(actionSelectorScrollPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addContainerGap())
        		.addGroup(gl_commandsPanel.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(skipButton, GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        			.addContainerGap())
        		.addComponent(skipAndPlayersPaneSeparator, GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        		.addGroup(Alignment.LEADING, gl_commandsPanel.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(playersTabbedPane, GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        			.addContainerGap())
        );
        gl_commandsPanel.setVerticalGroup(
        	gl_commandsPanel.createParallelGroup(Alignment.LEADING)
        		.addGroup(gl_commandsPanel.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(rollDiceButton)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(rollDiceAndActionSelectorSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(actionSelectorLabel)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(actionSelectorScrollPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(skipButton)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(skipAndPlayersPaneSeparator, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(playersTabbedPane, GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        			.addContainerGap())
        );
        
        actionSelectorPanel = new JPanel();
        actionSelectorPanel.setLayout(new BoxLayout(actionSelectorPanel, BoxLayout.Y_AXIS));
        actionSelectorScrollPane.setViewportView(actionSelectorPanel);
        actionSelectorScrollPane.setPreferredSize(new Dimension(0, 100));
        
        commandsPanel.setLayout(gl_commandsPanel);

        hsplitPane.setLeftComponent(commandsPanel);

        menuBar.setBorder(null);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        fileMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                fileMenuMenuSelected(evt);
            }
        });

        createMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        createMenuItem.setMnemonic('N');
        createMenuItem.setText("Create new game");
        createMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(createMenuItem);
        fileMenu.add(jSeparator1);

        loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadMenuItem.setMnemonic('L');
        loadMenuItem.setText("Load saved game");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);
        fileMenu.add(jSeparator2);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('S');
        saveMenuItem.setText("Save current game");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);
        fileMenu.add(jSeparator3);

        pauseMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        pauseMenuItem.setMnemonic('P');
        pauseMenuItem.setText("Pause current game");
        pauseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(pauseMenuItem);

        resumeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        resumeMenuItem.setMnemonic('R');
        resumeMenuItem.setText("Resume current game");
        resumeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(resumeMenuItem);

        terminateMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        terminateMenuItem.setMnemonic('T');
        terminateMenuItem.setText("Terminate current game");
        terminateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminateMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(terminateMenuItem);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setMnemonic('Q');
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);
        fileMenu.add(jSeparator4);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('E');
        editMenu.setText("Edit");

        configurationMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        configurationMenuItem.setMnemonic('C');
        configurationMenuItem.setText("Configuration");
        configurationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurationMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(configurationMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        fillerMenu.setEnabled(false);
        fillerMenu.setMargin(new java.awt.Insets(0, 2000, 0, 2000));
        fillerMenu.setMaximumSize(new java.awt.Dimension(32767, 0));
        fillerMenu.setPreferredSize(new java.awt.Dimension(0, 0));
        menuBar.add(fillerMenu);
        menuBar.add(notifierMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hsplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hsplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMenuItemActionPerformed
    	Game.getSingleton().pause();
    	if (JOptionPane.showConfirmDialog(this, "Are you sure you want to terminate the current game and create a new one?", "Confirm new", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
    		new Thread(new Runnable() {
    			public void run() {
    				try {
    					Game.getSingleton().create();
    				} catch (HotelException e1) {
    					// TODO Auto-generated catch block
    					e1.printStackTrace();
    				}
    			}
    		}).start();
    	} else {
    		Game.getSingleton().resume();
    	}
    }//GEN-LAST:event_createMenuItemActionPerformed

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        Game.getSingleton().pause();
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to terminate the current game and load another one?", "Confirm load", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
            	final GUIFileChooser fc = new GUIFileChooser(gui);
            	if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            		Game.getSingleton().load(fc.getSelectedFile().getName());
            	}
            } catch (HotelException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        } else {
            Game.getSingleton().resume();
        }
    }//GEN-LAST:event_loadMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        Game.getSingleton().pause();
        try {
        	final GUIFileChooser fc = new GUIFileChooser(gui);
        	if(fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        		Game.getSingleton().save(fc.getSelectedFile().getName());
        	}
        } catch (Exception e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        Game.getSingleton().resume();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void pauseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseMenuItemActionPerformed
        Game.getSingleton().pause();
    }//GEN-LAST:event_pauseMenuItemActionPerformed

    private void resumeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeMenuItemActionPerformed
        Game.getSingleton().resume();
    }//GEN-LAST:event_resumeMenuItemActionPerformed

    private void terminateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminateMenuItemActionPerformed
        Game.getSingleton().pause();
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to end the current game?", "Confirm end", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Game.getSingleton().end();
        } else {
            Game.getSingleton().resume();
        }
    }//GEN-LAST:event_terminateMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        Game.getSingleton().pause();
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to quit?", "Confirm quit", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                Game.getSingleton().quit();
            } catch (HotelException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        } else {
            Game.getSingleton().resume();
        }
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
       GUIAboutDialog guiAboutDialog = new GUIAboutDialog(gui, this, true);
       guiAboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void configurationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurationMenuItemActionPerformed
       GUIConfigDialog guiConfigDialog = new GUIConfigDialog(gui, this, true);
       guiConfigDialog.setVisible(true);
    }//GEN-LAST:event_configurationMenuItemActionPerformed

    private void rollDiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDiceButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rollDiceButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Game.getSingleton().pause();
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to quit?", "Confirm quit", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                Game.getSingleton().quit();
            } catch (HotelException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        } else {
            Game.getSingleton().resume();
        }
    }//GEN-LAST:event_formWindowClosing

    private void skipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipButtonActionPerformed
        if(askForInputAction != null) {
        	skipButton.setEnabled(false);
        	actionSelectorPanel.setEnabled(false);
        	actionSelectorPanel.removeAll();
            askForInputAction.setInputAsInteger(null);     
            askForInputAction = null;
        }
    }//GEN-LAST:event_skipButtonActionPerformed

    private void fileMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_fileMenuMenuSelected
        resumeMenuItem.setEnabled(Game.getSingleton().isPaused());
        pauseMenuItem.setEnabled(!Game.getSingleton().isPaused());
        terminateMenuItem.setEnabled(!Game.getSingleton().isTerminating());
        quitMenuItem.setEnabled(!Game.getSingleton().isQuitting());
    }//GEN-LAST:event_fileMenuMenuSelected

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JLabel actionSelectorLabel;
    private javax.swing.JPanel commandsPanel;
    private javax.swing.JMenuItem configurationMenuItem;
    private javax.swing.JMenuItem createMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu fillerMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JSplitPane hsplitPane;
    private javax.swing.JScrollPane actionSelectorScrollPane;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JSeparator rollDiceAndActionSelectorSeparator;
    private javax.swing.JSeparator skipAndPlayersPaneSeparator;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu notifierMenu;
    private javax.swing.JMenuItem pauseMenuItem;
    private javax.swing.JTabbedPane playersTabbedPane;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem resumeMenuItem;
    private javax.swing.JButton rollDiceButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton skipButton;
    private javax.swing.JMenuItem terminateMenuItem;
    private JPanel actionSelectorPanel;
}
